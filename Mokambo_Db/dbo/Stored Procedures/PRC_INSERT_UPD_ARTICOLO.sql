

CREATE PROCEDURE [dbo].[PRC_INSERT_UPD_ARTICOLO]
@ID_ARTICOLO		INT				= 0,
@NOME				VARCHAR(250)	= '',
@DESCRIZIONE		VARCHAR(250)	= '',
@CATEGORIA			INT				= 0,
@REPARTO			INT				= 0,
@PREZZO				MONEY			= 0,
@DEFAULT_IMAGE VARCHAR(250) = "",
@STATUS				  VARCHAR(10) = 'V',
@NEGOZIO			  VARCHAR(10) = '',
@DECONGELATO		  BIT = 0,
@DESCRIZIONE_INGLESE  VARCHAR(200) = '',
@DESCRIZIONE_FRANCESE VARCHAR(200) = '',
@INGREDIENTI		  VARCHAR(200) = '',
@ALLERGENI			  VARCHAR(200) = '',
@RISULTATO			  CHAR(2)		= '' OUTPUT,
@DESRISULTATO		  VARCHAR(1000)	= '' OUTPUT
AS
BEGIN

	SET NOCOUNT ON;

BEGIN TRY
	
	BEGIN TRANSACTION

		DECLARE @ARTICOLO TABLE (ID_ARTICOLO INT)

		MERGE ARTICOLO AS TARGET
		USING (SELECT @ID_ARTICOLO, @NOME, @DESCRIZIONE, @CATEGORIA, @DEFAULT_IMAGE, @PREZZO, @REPARTO, @STATUS, @DECONGELATO)
			  AS SOURCE (ID_ARTICOLO, NOME, DESCRIZIONE, ID_CATEGORIA, DEFAULT_IMAGE, PREZZO, ID_REPARTO, STATUS, DECONGELATO)
		ON SOURCE.ID_ARTICOLO = TARGET.ID_ARTICOLO AND TARGET.STATUS = 'V'
		WHEN MATCHED THEN UPDATE SET NOME = SOURCE.NOME,
									 DESCRIZIONE = SOURCE.DESCRIZIONE, 
									 PREZZO = SOURCE.PREZZO,
						 			 ID_CATEGORIA = SOURCE.ID_CATEGORIA,
									 ID_REPARTO = SOURCE.ID_REPARTO,
									 DEFAULT_IMAGE = SOURCE.DEFAULT_IMAGE,
									 STATUS = SOURCE.STATUS,
									 DECONGELATO = SOURCE.DECONGELATO
		WHEN NOT MATCHED THEN INSERT (NOME, DESCRIZIONE, ID_CATEGORIA, DEFAULT_IMAGE, PREZZO, ID_REPARTO, STATUS, DECONGELATO)
							  VALUES (SOURCE.NOME, SOURCE.DESCRIZIONE, SOURCE.ID_CATEGORIA, SOURCE.DEFAULT_IMAGE, SOURCE.PREZZO, SOURCE.ID_REPARTO, 'V', SOURCE.DECONGELATO)
		OUTPUT inserted.ID_ARTICOLO INTO @ARTICOLO;

		SELECT @ID_ARTICOLO = ID_ARTICOLO FROM @ARTICOLO

/*
		MERGE GIACENZA AS TARGET
		USING (SELECT @ID_ARTICOLO, @NEGOZIO, @QTA) AS SOURCE (ID_ARTICOLO, CODICE_NEGOZIO, GIACENZA)
		ON SOURCE.ID_ARTICOLO = TARGET.ID_ARTICOLO
		WHEN MATCHED THEN UPDATE SET GIACENZA = SOURCE.GIACENZA
		WHEN NOT MATCHED THEN INSERT (CODICE_NEGOZIO, EAN, ID_ARTICOLO, GIACENZA, RIORDINO)
							  VALUES (SOURCE.CODICE_NEGOZIO, @ID, @ID, SOURCE.GIACENZA, 999);
*/

		MERGE ARTICOLO_LINGUA AS TARGET
		USING (SELECT @ID_ARTICOLO, @DESCRIZIONE_INGLESE) AS SOURCE(ID_ARTICOLO, DESCRIZIONE)
		ON TARGET.ID_ARTICOLO = SOURCE.ID_ARTICOLO AND TARGET.ID_LINGUA = 2
		WHEN MATCHED THEN UPDATE SET DESCRIZIONE = SOURCE.DESCRIZIONE
		WHEN NOT MATCHED THEN INSERT (ID_ARTICOLO, ID_LINGUA, DESCRIZIONE)
							  VALUES (SOURCE.ID_ARTICOLO, 2, SOURCE.DESCRIZIONE);

		MERGE ARTICOLO_LINGUA AS TARGET
		USING (SELECT @ID_ARTICOLO, @DESCRIZIONE_FRANCESE) AS SOURCE(ID_ARTICOLO, DESCRIZIONE)
		ON TARGET.ID_ARTICOLO = SOURCE.ID_ARTICOLO AND TARGET.ID_LINGUA = 3
		WHEN MATCHED THEN UPDATE SET DESCRIZIONE = SOURCE.DESCRIZIONE
		WHEN NOT MATCHED THEN INSERT (ID_ARTICOLO, ID_LINGUA, DESCRIZIONE)
							  VALUES (SOURCE.ID_ARTICOLO, 3, SOURCE.DESCRIZIONE);

		DELETE FROM ARTICOLO_INGREDIENTE WHERE ID_ARTICOLO = @ID_ARTICOLO
		DECLARE @IDX INT = 1
		DECLARE @ID_INGREDIENTE INT
		WHILE @IDX <> 0
		BEGIN
			SET @IDX = CHARINDEX(',', @INGREDIENTI)
			IF @IDX <> 0 SET @ID_INGREDIENTE = LEFT(@INGREDIENTI, @IDX - 1)
			ELSE SET @ID_INGREDIENTE = @INGREDIENTI
			IF LEN(@ID_INGREDIENTE) <> 0
				INSERT INTO ARTICOLO_INGREDIENTE(ID_ARTICOLO, ID_INGREDIENTE) VALUES (@ID_ARTICOLO, @ID_INGREDIENTE)
			SET @INGREDIENTI = RIGHT(@INGREDIENTI, LEN(@INGREDIENTI) - @IDX)
		END

		DELETE FROM ARTICOLO_ALLERGENE WHERE ID_ARTICOLO = @ID_ARTICOLO
		SET @IDX = 1
		DECLARE @ID_ALLERGENE INT
		WHILE @IDX <> 0
		BEGIN
			SET @IDX = CHARINDEX(',', @ALLERGENI)
			IF @IDX <> 0 SET @ID_ALLERGENE = LEFT(@ALLERGENI, @IDX - 1)
			ELSE SET @ID_ALLERGENE = @ALLERGENI
			IF LEN(@ID_ALLERGENE) <> 0
				INSERT INTO ARTICOLO_ALLERGENE(ID_ARTICOLO, ID_ALLERGENE) VALUES (@ID_ARTICOLO, @ID_ALLERGENE)
			SET @ALLERGENI = RIGHT(@ALLERGENI, LEN(@ALLERGENI) - @IDX)
		END

		SET @RISULTATO		= 'OK' 
		SET @DESRISULTATO	= 'INSERIMENTO/AGGIORNAMENTO EFFETTUATO'

END TRY
BEGIN CATCH
    SET @RISULTATO = 'KO'
	SET @DESRISULTATO = ERROR_MESSAGE()
END CATCH
		
IF @RISULTATO = 'OK' 
	COMMIT TRANSACTION
ELSE
	ROLLBACK TRANSACTION
END